//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/FrancescoContent/Scripts/Inputs/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSys: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSys()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""MouseDelta"",
            ""id"": ""8b445174-f6d1-4a54-ba59-537134e83e28"",
            ""actions"": [
                {
                    ""name"": ""MouseDeltaDir"",
                    ""type"": ""Value"",
                    ""id"": ""20c23aac-ef15-4602-a15c-da2ae7705a4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Dir"",
                    ""id"": ""0b437d94-fa60-4ca9-81d7-d383b1af60c0"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.5,max=1),NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""53e328c3-876f-4279-b6a8-eaf22ac34014"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8d2ab6ca-8891-4f29-a738-2f420e4832bb"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""501c025c-f78a-486d-ab6c-9c0dd48298d6"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5a7b8cfa-f3b4-4bbe-b199-961be1a4b678"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""JumpInput"",
            ""id"": ""b9e3f3ba-d282-4938-ae2a-3d009374a33d"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""91f40adf-7424-4675-a013-bd9fb0ffef44"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""abc1c5eb-0c26-4d55-aadf-fc2e77032973"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseDelta
        m_MouseDelta = asset.FindActionMap("MouseDelta", throwIfNotFound: true);
        m_MouseDelta_MouseDeltaDir = m_MouseDelta.FindAction("MouseDeltaDir", throwIfNotFound: true);
        // JumpInput
        m_JumpInput = asset.FindActionMap("JumpInput", throwIfNotFound: true);
        m_JumpInput_Jump = m_JumpInput.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseDelta
    private readonly InputActionMap m_MouseDelta;
    private List<IMouseDeltaActions> m_MouseDeltaActionsCallbackInterfaces = new List<IMouseDeltaActions>();
    private readonly InputAction m_MouseDelta_MouseDeltaDir;
    public struct MouseDeltaActions
    {
        private @PlayerInputSys m_Wrapper;
        public MouseDeltaActions(@PlayerInputSys wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDeltaDir => m_Wrapper.m_MouseDelta_MouseDeltaDir;
        public InputActionMap Get() { return m_Wrapper.m_MouseDelta; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseDeltaActions set) { return set.Get(); }
        public void AddCallbacks(IMouseDeltaActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseDeltaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseDeltaActionsCallbackInterfaces.Add(instance);
            @MouseDeltaDir.started += instance.OnMouseDeltaDir;
            @MouseDeltaDir.performed += instance.OnMouseDeltaDir;
            @MouseDeltaDir.canceled += instance.OnMouseDeltaDir;
        }

        private void UnregisterCallbacks(IMouseDeltaActions instance)
        {
            @MouseDeltaDir.started -= instance.OnMouseDeltaDir;
            @MouseDeltaDir.performed -= instance.OnMouseDeltaDir;
            @MouseDeltaDir.canceled -= instance.OnMouseDeltaDir;
        }

        public void RemoveCallbacks(IMouseDeltaActions instance)
        {
            if (m_Wrapper.m_MouseDeltaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseDeltaActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseDeltaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseDeltaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseDeltaActions @MouseDelta => new MouseDeltaActions(this);

    // JumpInput
    private readonly InputActionMap m_JumpInput;
    private List<IJumpInputActions> m_JumpInputActionsCallbackInterfaces = new List<IJumpInputActions>();
    private readonly InputAction m_JumpInput_Jump;
    public struct JumpInputActions
    {
        private @PlayerInputSys m_Wrapper;
        public JumpInputActions(@PlayerInputSys wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_JumpInput_Jump;
        public InputActionMap Get() { return m_Wrapper.m_JumpInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumpInputActions set) { return set.Get(); }
        public void AddCallbacks(IJumpInputActions instance)
        {
            if (instance == null || m_Wrapper.m_JumpInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JumpInputActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IJumpInputActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IJumpInputActions instance)
        {
            if (m_Wrapper.m_JumpInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJumpInputActions instance)
        {
            foreach (var item in m_Wrapper.m_JumpInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JumpInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JumpInputActions @JumpInput => new JumpInputActions(this);
    public interface IMouseDeltaActions
    {
        void OnMouseDeltaDir(InputAction.CallbackContext context);
    }
    public interface IJumpInputActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
