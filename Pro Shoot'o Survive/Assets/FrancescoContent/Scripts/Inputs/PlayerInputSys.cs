//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/FrancescoContent/Scripts/Inputs/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSys: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSys()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""MouseDelta"",
            ""id"": ""8b445174-f6d1-4a54-ba59-537134e83e28"",
            ""actions"": [
                {
                    ""name"": ""MouseDeltaDir"",
                    ""type"": ""Value"",
                    ""id"": ""20c23aac-ef15-4602-a15c-da2ae7705a4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Dir"",
                    ""id"": ""0b437d94-fa60-4ca9-81d7-d383b1af60c0"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.5,max=1),NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""53e328c3-876f-4279-b6a8-eaf22ac34014"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8d2ab6ca-8891-4f29-a738-2f420e4832bb"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""501c025c-f78a-486d-ab6c-9c0dd48298d6"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5a7b8cfa-f3b4-4bbe-b199-961be1a4b678"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDeltaDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""2d83c5c6-68bf-4421-ba63-f04f9ef73a30"",
            ""actions"": [
                {
                    ""name"": ""PlayerMoveDir"",
                    ""type"": ""Value"",
                    ""id"": ""76bcd015-a7aa-411b-acc3-1c863a7209e1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Dir"",
                    ""id"": ""63e57b8b-a465-4fa1-83da-b9d5c24c8694"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a8ceb23c-6882-4616-8dbe-e8e71b180eab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5180de39-1d5b-4d8e-b21e-58bf096f5dcf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8b8fa26c-093f-4089-8dab-d04d8c139297"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1826765c-e535-4d09-8bde-325a4309dd31"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseDelta
        m_MouseDelta = asset.FindActionMap("MouseDelta", throwIfNotFound: true);
        m_MouseDelta_MouseDeltaDir = m_MouseDelta.FindAction("MouseDeltaDir", throwIfNotFound: true);
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_PlayerMoveDir = m_PlayerMovement.FindAction("PlayerMoveDir", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseDelta
    private readonly InputActionMap m_MouseDelta;
    private List<IMouseDeltaActions> m_MouseDeltaActionsCallbackInterfaces = new List<IMouseDeltaActions>();
    private readonly InputAction m_MouseDelta_MouseDeltaDir;
    public struct MouseDeltaActions
    {
        private @PlayerInputSys m_Wrapper;
        public MouseDeltaActions(@PlayerInputSys wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDeltaDir => m_Wrapper.m_MouseDelta_MouseDeltaDir;
        public InputActionMap Get() { return m_Wrapper.m_MouseDelta; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseDeltaActions set) { return set.Get(); }
        public void AddCallbacks(IMouseDeltaActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseDeltaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseDeltaActionsCallbackInterfaces.Add(instance);
            @MouseDeltaDir.started += instance.OnMouseDeltaDir;
            @MouseDeltaDir.performed += instance.OnMouseDeltaDir;
            @MouseDeltaDir.canceled += instance.OnMouseDeltaDir;
        }

        private void UnregisterCallbacks(IMouseDeltaActions instance)
        {
            @MouseDeltaDir.started -= instance.OnMouseDeltaDir;
            @MouseDeltaDir.performed -= instance.OnMouseDeltaDir;
            @MouseDeltaDir.canceled -= instance.OnMouseDeltaDir;
        }

        public void RemoveCallbacks(IMouseDeltaActions instance)
        {
            if (m_Wrapper.m_MouseDeltaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseDeltaActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseDeltaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseDeltaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseDeltaActions @MouseDelta => new MouseDeltaActions(this);

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_PlayerMoveDir;
    public struct PlayerMovementActions
    {
        private @PlayerInputSys m_Wrapper;
        public PlayerMovementActions(@PlayerInputSys wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMoveDir => m_Wrapper.m_PlayerMovement_PlayerMoveDir;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @PlayerMoveDir.started += instance.OnPlayerMoveDir;
            @PlayerMoveDir.performed += instance.OnPlayerMoveDir;
            @PlayerMoveDir.canceled += instance.OnPlayerMoveDir;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @PlayerMoveDir.started -= instance.OnPlayerMoveDir;
            @PlayerMoveDir.performed -= instance.OnPlayerMoveDir;
            @PlayerMoveDir.canceled -= instance.OnPlayerMoveDir;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    public interface IMouseDeltaActions
    {
        void OnMouseDeltaDir(InputAction.CallbackContext context);
    }
    public interface IPlayerMovementActions
    {
        void OnPlayerMoveDir(InputAction.CallbackContext context);
    }
}
